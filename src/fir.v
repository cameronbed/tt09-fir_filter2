// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2023.1_2/1049935 Production Release
//  HLS Date:       Sat Jun 10 10:53:51 PDT 2023
// 
//  Generated by:   hx2227@hansolo.poly.edu
//  Generated date: Wed Dec 11 12:37:40 2024
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    fir_core_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module fir_core_core_fsm (
  clk, rst, fsm_output, Shift_Accum_Loop_C_5_tr0
);
  input clk;
  input rst;
  output [7:0] fsm_output;
  reg [7:0] fsm_output;
  input Shift_Accum_Loop_C_5_tr0;


  // FSM State Type Declaration for fir_core_core_fsm_1
  parameter
    main_C_0 = 3'd0,
    Shift_Accum_Loop_C_0 = 3'd1,
    Shift_Accum_Loop_C_1 = 3'd2,
    Shift_Accum_Loop_C_2 = 3'd3,
    Shift_Accum_Loop_C_3 = 3'd4,
    Shift_Accum_Loop_C_4 = 3'd5,
    Shift_Accum_Loop_C_5 = 3'd6,
    main_C_1 = 3'd7;

  reg [2:0] state_var;
  reg [2:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : fir_core_core_fsm_1
    case (state_var)
      Shift_Accum_Loop_C_0 : begin
        fsm_output = 8'b00000010;
        state_var_NS = Shift_Accum_Loop_C_1;
      end
      Shift_Accum_Loop_C_1 : begin
        fsm_output = 8'b00000100;
        state_var_NS = Shift_Accum_Loop_C_2;
      end
      Shift_Accum_Loop_C_2 : begin
        fsm_output = 8'b00001000;
        state_var_NS = Shift_Accum_Loop_C_3;
      end
      Shift_Accum_Loop_C_3 : begin
        fsm_output = 8'b00010000;
        state_var_NS = Shift_Accum_Loop_C_4;
      end
      Shift_Accum_Loop_C_4 : begin
        fsm_output = 8'b00100000;
        state_var_NS = Shift_Accum_Loop_C_5;
      end
      Shift_Accum_Loop_C_5 : begin
        fsm_output = 8'b01000000;
        if ( Shift_Accum_Loop_C_5_tr0 ) begin
          state_var_NS = main_C_1;
        end
        else begin
          state_var_NS = Shift_Accum_Loop_C_0;
        end
      end
      main_C_1 : begin
        fsm_output = 8'b10000000;
        state_var_NS = main_C_0;
      end
      // main_C_0
      default : begin
        fsm_output = 8'b00000001;
        state_var_NS = Shift_Accum_Loop_C_0;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= main_C_0;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    fir_core
// ------------------------------------------------------------------


module fir_core (
  clk, rst, y_rsc_dat, y_triosy_lz, x_rsc_dat, x_triosy_lz
);
  input clk;
  input rst;
  output [7:0] y_rsc_dat;
  output y_triosy_lz;
  input [7:0] x_rsc_dat;
  output x_triosy_lz;


  // Interconnect Declarations
  reg [7:0] y_rsci_idat;
  wire [7:0] x_rsci_idat;
  wire [7:0] fsm_output;
  wire or_tmp_11;
  wire or_tmp_14;
  reg i_3_sva;
  reg reg_x_triosy_obj_ld_cse;
  wire acc_nor_cse;
  reg [7:0] shift_reg_4_lpi_2;
  reg [7:0] shift_reg_3_lpi_2;
  reg [7:0] shift_reg_11_lpi_2;
  reg [7:0] shift_reg_2_lpi_2;
  reg [7:0] shift_reg_10_lpi_2;
  reg [7:0] shift_reg_9_lpi_2;
  reg [7:0] shift_reg_1_lpi_2;
  reg [7:0] shift_reg_0_lpi_2;
  reg [7:0] shift_reg_8_lpi_2;
  reg [7:0] shift_reg_7_lpi_2;
  reg [7:0] shift_reg_6_lpi_2;
  reg [7:0] shift_reg_5_lpi_2;
  reg [7:0] x_sva;
  reg [7:0] acc_1_sva;
  wire [7:0] acc_6_sva_mx0w2;
  wire [9:0] nl_acc_6_sva_mx0w2;
  wire [7:0] Shift_Accum_Loop_5_mul_sdt_1;
  wire [11:0] nl_Shift_Accum_Loop_5_mul_sdt_1;
  wire [7:0] Shift_Accum_Loop_3_else_Shift_Accum_Loop_else_slc_shift_reg_8_7_0_1_cse_sva_mx0;

  wire[7:0] c_c_mux_nl;
  wire[7:0] Shift_Accum_Loop_7_acc_1_nl;
  wire[9:0] nl_Shift_Accum_Loop_7_acc_1_nl;
  wire and_22_nl;
  wire[5:0] Shift_Accum_Loop_acc_6_nl;
  wire[6:0] nl_Shift_Accum_Loop_acc_6_nl;
  wire[7:0] Shift_Accum_Loop_1_mul_nl;
  wire[11:0] nl_Shift_Accum_Loop_1_mul_nl;
  wire[7:0] shift_reg_static_init_else_mux_12_nl;
  wire[7:0] Shift_Accum_Loop_5_Shift_Accum_Loop_mux_nl;

  // Interconnect Declarations for Component Instantiations 
  wire  nl_fir_core_core_fsm_inst_Shift_Accum_Loop_C_5_tr0;
  assign nl_fir_core_core_fsm_inst_Shift_Accum_Loop_C_5_tr0 = ~ i_3_sva;
  ccs_out_v1 #(.rscid(32'sd1),
  .width(32'sd8)) y_rsci (
      .idat(y_rsci_idat),
      .dat(y_rsc_dat)
    );
  ccs_in_v1 #(.rscid(32'sd2),
  .width(32'sd8)) x_rsci (
      .dat(x_rsc_dat),
      .idat(x_rsci_idat)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) y_triosy_obj (
      .ld(reg_x_triosy_obj_ld_cse),
      .lz(y_triosy_lz)
    );
  mgc_io_sync_v2 #(.valid(32'sd0)) x_triosy_obj (
      .ld(reg_x_triosy_obj_ld_cse),
      .lz(x_triosy_lz)
    );
  fir_core_core_fsm fir_core_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .Shift_Accum_Loop_C_5_tr0(nl_fir_core_core_fsm_inst_Shift_Accum_Loop_C_5_tr0)
    );
  assign acc_nor_cse = ~((fsm_output[7]) | (fsm_output[0]));
  assign nl_Shift_Accum_Loop_acc_6_nl = (Shift_Accum_Loop_5_mul_sdt_1[7:2]) + (Shift_Accum_Loop_3_else_Shift_Accum_Loop_else_slc_shift_reg_8_7_0_1_cse_sva_mx0[5:0]);
  assign Shift_Accum_Loop_acc_6_nl = nl_Shift_Accum_Loop_acc_6_nl[5:0];
  assign shift_reg_static_init_else_mux_12_nl = MUX_v_8_2_2(shift_reg_3_lpi_2, shift_reg_11_lpi_2,
      i_3_sva);
  assign nl_Shift_Accum_Loop_1_mul_nl = shift_reg_static_init_else_mux_12_nl * ({(~
      i_3_sva) , 1'b0 , (~ i_3_sva) , i_3_sva});
  assign Shift_Accum_Loop_1_mul_nl = nl_Shift_Accum_Loop_1_mul_nl[7:0];
  assign nl_acc_6_sva_mx0w2 = ({Shift_Accum_Loop_acc_6_nl , (Shift_Accum_Loop_5_mul_sdt_1[1:0])})
      + acc_1_sva + Shift_Accum_Loop_1_mul_nl + Shift_Accum_Loop_3_else_Shift_Accum_Loop_else_slc_shift_reg_8_7_0_1_cse_sva_mx0;
  assign acc_6_sva_mx0w2 = nl_acc_6_sva_mx0w2[7:0];
  assign Shift_Accum_Loop_5_Shift_Accum_Loop_mux_nl = MUX_v_8_2_2(x_sva, shift_reg_7_lpi_2,
      i_3_sva);
  assign nl_Shift_Accum_Loop_5_mul_sdt_1 = Shift_Accum_Loop_5_Shift_Accum_Loop_mux_nl
      * ({i_3_sva , 1'b0 , i_3_sva , (~ i_3_sva)});
  assign Shift_Accum_Loop_5_mul_sdt_1 = nl_Shift_Accum_Loop_5_mul_sdt_1[7:0];
  assign Shift_Accum_Loop_3_else_Shift_Accum_Loop_else_slc_shift_reg_8_7_0_1_cse_sva_mx0
      = MUX_v_8_2_2(shift_reg_1_lpi_2, shift_reg_9_lpi_2, i_3_sva);
  assign or_tmp_11 = (~ (fsm_output[1])) | i_3_sva;
  assign or_tmp_14 = ~((fsm_output[1]) & i_3_sva);
  always @(posedge clk) begin
    if ( rst ) begin
      i_3_sva <= 1'b0;
    end
    else if ( (fsm_output[6]) | (fsm_output[0]) ) begin
      i_3_sva <= ~ (fsm_output[6]);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      y_rsci_idat <= 8'b00000000;
    end
    else if ( ~((~ (fsm_output[6])) | i_3_sva) ) begin
      y_rsci_idat <= acc_1_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      acc_1_sva <= 8'b00000000;
    end
    else if ( (fsm_output[0]) | (fsm_output[7]) | (fsm_output[1]) ) begin
      acc_1_sva <= MUX_v_8_2_2(8'b00000000, c_c_mux_nl, acc_nor_cse);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      x_sva <= 8'b00000000;
    end
    else if ( ~ acc_nor_cse ) begin
      x_sva <= x_rsci_idat;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_1_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_11 ) begin
      shift_reg_1_lpi_2 <= shift_reg_0_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_3_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_11 ) begin
      shift_reg_3_lpi_2 <= shift_reg_2_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      reg_x_triosy_obj_ld_cse <= 1'b0;
    end
    else begin
      reg_x_triosy_obj_ld_cse <= (~ i_3_sva) & (fsm_output[6]);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_5_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_5_lpi_2 <= shift_reg_4_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_7_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_7_lpi_2 <= shift_reg_6_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_9_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_9_lpi_2 <= shift_reg_8_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_11_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_11_lpi_2 <= shift_reg_10_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_0_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_11 ) begin
      shift_reg_0_lpi_2 <= x_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_2_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_11 ) begin
      shift_reg_2_lpi_2 <= shift_reg_1_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_6_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_6_lpi_2 <= shift_reg_5_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_8_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_8_lpi_2 <= shift_reg_7_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_10_lpi_2 <= 8'b00000000;
    end
    else if ( ~ or_tmp_14 ) begin
      shift_reg_10_lpi_2 <= shift_reg_9_lpi_2;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      shift_reg_4_lpi_2 <= 8'b00000000;
    end
    else if ( fsm_output[1] ) begin
      shift_reg_4_lpi_2 <= shift_reg_3_lpi_2;
    end
  end
  assign nl_Shift_Accum_Loop_7_acc_1_nl = acc_6_sva_mx0w2 + (~ shift_reg_5_lpi_2)
      + ({(shift_reg_5_lpi_2[3:0]) , 4'b0001});
  assign Shift_Accum_Loop_7_acc_1_nl = nl_Shift_Accum_Loop_7_acc_1_nl[7:0];
  assign and_22_nl = (~ i_3_sva) & (fsm_output[1]);
  assign c_c_mux_nl = MUX_v_8_2_2(Shift_Accum_Loop_7_acc_1_nl, acc_6_sva_mx0w2, and_22_nl);

  function automatic [7:0] MUX_v_8_2_2;
    input [7:0] input_0;
    input [7:0] input_1;
    input  sel;
    reg [7:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_8_2_2 = result;
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    fir
// ------------------------------------------------------------------


module fir (
  clk, rst, y_rsc_dat, y_triosy_lz, x_rsc_dat, x_triosy_lz
);
  input clk;
  input rst;
  output [7:0] y_rsc_dat;
  output y_triosy_lz;
  input [7:0] x_rsc_dat;
  output x_triosy_lz;



  // Interconnect Declarations for Component Instantiations 
  fir_core fir_core_inst (
      .clk(clk),
      .rst(rst),
      .y_rsc_dat(y_rsc_dat),
      .y_triosy_lz(y_triosy_lz),
      .x_rsc_dat(x_rsc_dat),
      .x_triosy_lz(x_triosy_lz)
    );
endmodule


